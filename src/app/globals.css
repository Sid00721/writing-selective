/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Fixed CSS variables for consistent theming across environments */
:root {
  --background: #ffffff;
  --foreground: #171717;
}

/* Remove automatic dark mode detection to ensure consistency */
/* Commenting out the media query that was causing inconsistencies */
/*
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}
*/

/* Force light theme for consistency across all environments */
body {
  background: var(--background);
  color: var(--foreground);
  /* Ensure consistent font rendering */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Ensure all text elements use consistent colors */
* {
  box-sizing: border-box;
}

/* **** ADDED FOR DEBUGGING TEXT VISIBILITY **** */
/* This class is intended to be added to the wrapper around ReadOnlyLexical */
/* when 'prose' classes are removed, to force basic text styles. */
.debug-text-visibility p,
.debug-text-visibility span,
.debug-text-visibility div,
.debug-text-visibility li, /* Target list items as well */
.debug-text-visibility h1, /* Target headings */
.debug-text-visibility h2,
.debug-text-visibility h3,
.debug-text-visibility h4,
.debug-text-visibility h5,
.debug-text-visibility h6 {
    color: var(--foreground) !important;      /* Use the CSS variable for foreground color */
    background-color: transparent !important; /* Ensure no weird background is hiding it */
    font-size: 16px !important;           /* Ensure a readable font size */
    line-height: normal !important;       /* Ensure normal line height */
    height: auto !important;              /* Ensure height isn't collapsed */
    opacity: 1 !important;                /* Ensure not transparent */
    visibility: visible !important;       /* Ensure not hidden */
}

/* More specific targeting if Lexical's ContentEditable has a specific class (e.g., 'content-readonly') */
.content-readonly > p,
.content-readonly > div > p { /* Example if paragraphs are nested one level down */
    color: var(--foreground) !important;
    font-size: 16px !important;
    line-height: normal !important;
}
/* **** END DEBUGGING STYLES **** */

/* src/app/globals.css */

.checkmark {
  width: 96px;
  height: 96px;
  border-radius: 50%;
  display: block;
  stroke-width: 3;
  stroke: #fff; /* The color of the checkmark */
  stroke-miterlimit: 10;
  margin: 2% auto;
  box-shadow: inset 0px 0px 0px #4ade80; /* Initial state of the green circle fill */
  animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
}

.checkmark__circle {
  stroke-dasharray: 166;
  stroke-dashoffset: 166;
  stroke-width: 3;
  stroke-miterlimit: 10;
  stroke: #4ade80; /* The color of the circle outline that gets drawn */
  fill: none;
  animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
}

.checkmark__check {
  transform-origin: 50% 50%;
  stroke-dasharray: 48;
  stroke-dashoffset: 48;
  animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
}

@keyframes stroke {
  100% {
    stroke-dashoffset: 0;
  }
}

@keyframes scale {
  0%, 100% {
    transform: none;
  }
  50% {
    transform: scale3d(1.1, 1.1, 1);
  }
}

@keyframes fill {
  100% {
    box-shadow: inset 0px 0px 0px 60px #4ade80; /* Final state of the green circle fill */
  }
}